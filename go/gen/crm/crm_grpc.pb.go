// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: crm.proto

package service_crm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Crm_SayHello_FullMethodName                      = "/handlers.api.Crm/SayHello"
	Crm_SayHello2_FullMethodName                     = "/handlers.api.Crm/SayHello2"
	Crm_SaveNewUser_FullMethodName                   = "/handlers.api.Crm/SaveNewUser"
	Crm_CheckUserEmail_FullMethodName                = "/handlers.api.Crm/CheckUserEmail"
	Crm_ChangeUserPassword_FullMethodName            = "/handlers.api.Crm/ChangeUserPassword"
	Crm_ChangeUserEmail_FullMethodName               = "/handlers.api.Crm/ChangeUserEmail"
	Crm_ChangeUserPhone_FullMethodName               = "/handlers.api.Crm/ChangeUserPhone"
	Crm_ChangeUserProfile_FullMethodName             = "/handlers.api.Crm/ChangeUserProfile"
	Crm_AddReview_FullMethodName                     = "/handlers.api.Crm/AddReview"
	Crm_DeleteReview_FullMethodName                  = "/handlers.api.Crm/DeleteReview"
	Crm_GetReviewList_FullMethodName                 = "/handlers.api.Crm/GetReviewList"
	Crm_GetUserInfo_FullMethodName                   = "/handlers.api.Crm/GetUserInfo"
	Crm_GetVacancyList_FullMethodName                = "/handlers.api.Crm/GetVacancyList"
	Crm_GetSubmissionList_FullMethodName             = "/handlers.api.Crm/GetSubmissionList"
	Crm_SetSubmission_FullMethodName                 = "/handlers.api.Crm/SetSubmission"
	Crm_SetVacancy_FullMethodName                    = "/handlers.api.Crm/SetVacancy"
	Crm_DeleteVacancy_FullMethodName                 = "/handlers.api.Crm/DeleteVacancy"
	Crm_CreateCompanyTicket_FullMethodName           = "/handlers.api.Crm/CreateCompanyTicket"
	Crm_GetCompanyList_FullMethodName                = "/handlers.api.Crm/GetCompanyList"
	Crm_UpdateCompanyTicketStatus_FullMethodName     = "/handlers.api.Crm/UpdateCompanyTicketStatus"
	Crm_GetCompanyTickets_FullMethodName             = "/handlers.api.Crm/GetCompanyTickets"
	Crm_SetClientValidation_FullMethodName           = "/handlers.api.Crm/SetClientValidation"
	Crm_GetClientValidation_FullMethodName           = "/handlers.api.Crm/GetClientValidation"
	Crm_GetBalance_FullMethodName                    = "/handlers.api.Crm/GetBalance"
	Crm_SaveTransaction_FullMethodName               = "/handlers.api.Crm/SaveTransaction"
	Crm_GetBankAccount_FullMethodName                = "/handlers.api.Crm/GetBankAccount"
	Crm_GetTransactions_FullMethodName               = "/handlers.api.Crm/GetTransactions"
	Crm_UpdateTransactionStatus_FullMethodName       = "/handlers.api.Crm/UpdateTransactionStatus"
	Crm_CreateBankAccountTicket_FullMethodName       = "/handlers.api.Crm/CreateBankAccountTicket"
	Crm_UpdateBankAccountTicketStatus_FullMethodName = "/handlers.api.Crm/UpdateBankAccountTicketStatus"
	Crm_GetBankAccountTickets_FullMethodName         = "/handlers.api.Crm/GetBankAccountTickets"
)

// CrmClient is the client API for Crm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrmClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// регистрация
	SaveNewUser(ctx context.Context, in *SaveNewUserRequest, opts ...grpc.CallOption) (*SaveNewUserResponse, error)
	// авторизация
	CheckUserEmail(ctx context.Context, in *CheckUserEmailRequest, opts ...grpc.CallOption) (*CheckUserEmailResponse, error)
	// обновить пользовательскую информацию
	ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*ChangeUserPasswordResponse, error)
	ChangeUserEmail(ctx context.Context, in *ChangeUserEmailRequest, opts ...grpc.CallOption) (*ChangeUserEmailResponse, error)
	ChangeUserPhone(ctx context.Context, in *ChangeUserPhoneRequest, opts ...grpc.CallOption) (*ChangeUserPhoneResponse, error)
	ChangeUserProfile(ctx context.Context, in *ChangeUserProfileRequest, opts ...grpc.CallOption) (*ChangeUserProfileResponse, error)
	// добавить отзыв
	AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error)
	DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error)
	//получить список отзывов
	GetReviewList(ctx context.Context, in *GetReviewListRequest, opts ...grpc.CallOption) (*GetReviewListResponse, error)
	// получить информацию о пользователе
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// получить вакансии/приглашения
	GetVacancyList(ctx context.Context, in *GetVacancyListRequest, opts ...grpc.CallOption) (*GetVacancyListResponse, error)
	GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error)
	// сохранить приглашение
	SetSubmission(ctx context.Context, in *SetSubmissionRequest, opts ...grpc.CallOption) (*SetSubmissionResponse, error)
	//-------------------------------------------//
	SetVacancy(ctx context.Context, in *SetVacancyRequest, opts ...grpc.CallOption) (*SetVacancyResponse, error)
	DeleteVacancy(ctx context.Context, in *DeleteVacancyRequest, opts ...grpc.CallOption) (*DeleteVacancyResponse, error)
	// создать и редактировать компанию
	CreateCompanyTicket(ctx context.Context, in *CreateCompanyTicketRequest, opts ...grpc.CallOption) (*CreateCompanyTicketResponse, error)
	GetCompanyList(ctx context.Context, in *GetCompanyListRequest, opts ...grpc.CallOption) (*GetCompanyListResponse, error)
	UpdateCompanyTicketStatus(ctx context.Context, in *UpdateCompanyTicketStatusRequest, opts ...grpc.CallOption) (*UpdateCompanyTicketStatusResponse, error)
	GetCompanyTickets(ctx context.Context, in *GetCompanyTicketsRequest, opts ...grpc.CallOption) (*GetCompanyTicketsResponse, error)
	SetClientValidation(ctx context.Context, in *SetClientValidationRequest, opts ...grpc.CallOption) (*SetClientValidationResponse, error)
	GetClientValidation(ctx context.Context, in *GetClientValidationRequest, opts ...grpc.CallOption) (*GetClientValidationResponse, error)
	// финансы
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	SaveTransaction(ctx context.Context, in *SaveTransactionRequest, opts ...grpc.CallOption) (*SaveTransactionResponse, error)
	GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	UpdateTransactionStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*UpdateTransactionStatusResponse, error)
	CreateBankAccountTicket(ctx context.Context, in *CreateBankAccountTicketRequest, opts ...grpc.CallOption) (*CreateBankAccountTicketResponse, error)
	UpdateBankAccountTicketStatus(ctx context.Context, in *UpdateBankAccountTicketStatusRequest, opts ...grpc.CallOption) (*UpdateBankAccountTicketStatusResponse, error)
	GetBankAccountTickets(ctx context.Context, in *GetBankAccountTicketsRequest, opts ...grpc.CallOption) (*GetBankAccountTicketsResponse, error)
}

type crmClient struct {
	cc grpc.ClientConnInterface
}

func NewCrmClient(cc grpc.ClientConnInterface) CrmClient {
	return &crmClient{cc}
}

func (c *crmClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Crm_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SayHello2(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Crm_SayHello2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SaveNewUser(ctx context.Context, in *SaveNewUserRequest, opts ...grpc.CallOption) (*SaveNewUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveNewUserResponse)
	err := c.cc.Invoke(ctx, Crm_SaveNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) CheckUserEmail(ctx context.Context, in *CheckUserEmailRequest, opts ...grpc.CallOption) (*CheckUserEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckUserEmailResponse)
	err := c.cc.Invoke(ctx, Crm_CheckUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) ChangeUserPassword(ctx context.Context, in *ChangeUserPasswordRequest, opts ...grpc.CallOption) (*ChangeUserPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserPasswordResponse)
	err := c.cc.Invoke(ctx, Crm_ChangeUserPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) ChangeUserEmail(ctx context.Context, in *ChangeUserEmailRequest, opts ...grpc.CallOption) (*ChangeUserEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserEmailResponse)
	err := c.cc.Invoke(ctx, Crm_ChangeUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) ChangeUserPhone(ctx context.Context, in *ChangeUserPhoneRequest, opts ...grpc.CallOption) (*ChangeUserPhoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserPhoneResponse)
	err := c.cc.Invoke(ctx, Crm_ChangeUserPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) ChangeUserProfile(ctx context.Context, in *ChangeUserProfileRequest, opts ...grpc.CallOption) (*ChangeUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUserProfileResponse)
	err := c.cc.Invoke(ctx, Crm_ChangeUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) AddReview(ctx context.Context, in *AddReviewRequest, opts ...grpc.CallOption) (*AddReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReviewResponse)
	err := c.cc.Invoke(ctx, Crm_AddReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*DeleteReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReviewResponse)
	err := c.cc.Invoke(ctx, Crm_DeleteReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetReviewList(ctx context.Context, in *GetReviewListRequest, opts ...grpc.CallOption) (*GetReviewListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReviewListResponse)
	err := c.cc.Invoke(ctx, Crm_GetReviewList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, Crm_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetVacancyList(ctx context.Context, in *GetVacancyListRequest, opts ...grpc.CallOption) (*GetVacancyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVacancyListResponse)
	err := c.cc.Invoke(ctx, Crm_GetVacancyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubmissionListResponse)
	err := c.cc.Invoke(ctx, Crm_GetSubmissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SetSubmission(ctx context.Context, in *SetSubmissionRequest, opts ...grpc.CallOption) (*SetSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSubmissionResponse)
	err := c.cc.Invoke(ctx, Crm_SetSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SetVacancy(ctx context.Context, in *SetVacancyRequest, opts ...grpc.CallOption) (*SetVacancyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVacancyResponse)
	err := c.cc.Invoke(ctx, Crm_SetVacancy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) DeleteVacancy(ctx context.Context, in *DeleteVacancyRequest, opts ...grpc.CallOption) (*DeleteVacancyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVacancyResponse)
	err := c.cc.Invoke(ctx, Crm_DeleteVacancy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) CreateCompanyTicket(ctx context.Context, in *CreateCompanyTicketRequest, opts ...grpc.CallOption) (*CreateCompanyTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyTicketResponse)
	err := c.cc.Invoke(ctx, Crm_CreateCompanyTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetCompanyList(ctx context.Context, in *GetCompanyListRequest, opts ...grpc.CallOption) (*GetCompanyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyListResponse)
	err := c.cc.Invoke(ctx, Crm_GetCompanyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) UpdateCompanyTicketStatus(ctx context.Context, in *UpdateCompanyTicketStatusRequest, opts ...grpc.CallOption) (*UpdateCompanyTicketStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCompanyTicketStatusResponse)
	err := c.cc.Invoke(ctx, Crm_UpdateCompanyTicketStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetCompanyTickets(ctx context.Context, in *GetCompanyTicketsRequest, opts ...grpc.CallOption) (*GetCompanyTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyTicketsResponse)
	err := c.cc.Invoke(ctx, Crm_GetCompanyTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SetClientValidation(ctx context.Context, in *SetClientValidationRequest, opts ...grpc.CallOption) (*SetClientValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetClientValidationResponse)
	err := c.cc.Invoke(ctx, Crm_SetClientValidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetClientValidation(ctx context.Context, in *GetClientValidationRequest, opts ...grpc.CallOption) (*GetClientValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientValidationResponse)
	err := c.cc.Invoke(ctx, Crm_GetClientValidation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, Crm_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) SaveTransaction(ctx context.Context, in *SaveTransactionRequest, opts ...grpc.CallOption) (*SaveTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTransactionResponse)
	err := c.cc.Invoke(ctx, Crm_SaveTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetBankAccount(ctx context.Context, in *GetBankAccountRequest, opts ...grpc.CallOption) (*GetBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankAccountResponse)
	err := c.cc.Invoke(ctx, Crm_GetBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, Crm_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) UpdateTransactionStatus(ctx context.Context, in *UpdateTransactionStatusRequest, opts ...grpc.CallOption) (*UpdateTransactionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTransactionStatusResponse)
	err := c.cc.Invoke(ctx, Crm_UpdateTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) CreateBankAccountTicket(ctx context.Context, in *CreateBankAccountTicketRequest, opts ...grpc.CallOption) (*CreateBankAccountTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankAccountTicketResponse)
	err := c.cc.Invoke(ctx, Crm_CreateBankAccountTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) UpdateBankAccountTicketStatus(ctx context.Context, in *UpdateBankAccountTicketStatusRequest, opts ...grpc.CallOption) (*UpdateBankAccountTicketStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBankAccountTicketStatusResponse)
	err := c.cc.Invoke(ctx, Crm_UpdateBankAccountTicketStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crmClient) GetBankAccountTickets(ctx context.Context, in *GetBankAccountTicketsRequest, opts ...grpc.CallOption) (*GetBankAccountTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankAccountTicketsResponse)
	err := c.cc.Invoke(ctx, Crm_GetBankAccountTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrmServer is the server API for Crm service.
// All implementations must embed UnimplementedCrmServer
// for forward compatibility.
type CrmServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayHello2(context.Context, *HelloRequest) (*HelloResponse, error)
	// регистрация
	SaveNewUser(context.Context, *SaveNewUserRequest) (*SaveNewUserResponse, error)
	// авторизация
	CheckUserEmail(context.Context, *CheckUserEmailRequest) (*CheckUserEmailResponse, error)
	// обновить пользовательскую информацию
	ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*ChangeUserPasswordResponse, error)
	ChangeUserEmail(context.Context, *ChangeUserEmailRequest) (*ChangeUserEmailResponse, error)
	ChangeUserPhone(context.Context, *ChangeUserPhoneRequest) (*ChangeUserPhoneResponse, error)
	ChangeUserProfile(context.Context, *ChangeUserProfileRequest) (*ChangeUserProfileResponse, error)
	// добавить отзыв
	AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error)
	//получить список отзывов
	GetReviewList(context.Context, *GetReviewListRequest) (*GetReviewListResponse, error)
	// получить информацию о пользователе
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// получить вакансии/приглашения
	GetVacancyList(context.Context, *GetVacancyListRequest) (*GetVacancyListResponse, error)
	GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error)
	// сохранить приглашение
	SetSubmission(context.Context, *SetSubmissionRequest) (*SetSubmissionResponse, error)
	//-------------------------------------------//
	SetVacancy(context.Context, *SetVacancyRequest) (*SetVacancyResponse, error)
	DeleteVacancy(context.Context, *DeleteVacancyRequest) (*DeleteVacancyResponse, error)
	// создать и редактировать компанию
	CreateCompanyTicket(context.Context, *CreateCompanyTicketRequest) (*CreateCompanyTicketResponse, error)
	GetCompanyList(context.Context, *GetCompanyListRequest) (*GetCompanyListResponse, error)
	UpdateCompanyTicketStatus(context.Context, *UpdateCompanyTicketStatusRequest) (*UpdateCompanyTicketStatusResponse, error)
	GetCompanyTickets(context.Context, *GetCompanyTicketsRequest) (*GetCompanyTicketsResponse, error)
	SetClientValidation(context.Context, *SetClientValidationRequest) (*SetClientValidationResponse, error)
	GetClientValidation(context.Context, *GetClientValidationRequest) (*GetClientValidationResponse, error)
	// финансы
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	SaveTransaction(context.Context, *SaveTransactionRequest) (*SaveTransactionResponse, error)
	GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	UpdateTransactionStatus(context.Context, *UpdateTransactionStatusRequest) (*UpdateTransactionStatusResponse, error)
	CreateBankAccountTicket(context.Context, *CreateBankAccountTicketRequest) (*CreateBankAccountTicketResponse, error)
	UpdateBankAccountTicketStatus(context.Context, *UpdateBankAccountTicketStatusRequest) (*UpdateBankAccountTicketStatusResponse, error)
	GetBankAccountTickets(context.Context, *GetBankAccountTicketsRequest) (*GetBankAccountTicketsResponse, error)
	mustEmbedUnimplementedCrmServer()
}

// UnimplementedCrmServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCrmServer struct{}

func (UnimplementedCrmServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCrmServer) SayHello2(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello2 not implemented")
}
func (UnimplementedCrmServer) SaveNewUser(context.Context, *SaveNewUserRequest) (*SaveNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNewUser not implemented")
}
func (UnimplementedCrmServer) CheckUserEmail(context.Context, *CheckUserEmailRequest) (*CheckUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserEmail not implemented")
}
func (UnimplementedCrmServer) ChangeUserPassword(context.Context, *ChangeUserPasswordRequest) (*ChangeUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPassword not implemented")
}
func (UnimplementedCrmServer) ChangeUserEmail(context.Context, *ChangeUserEmailRequest) (*ChangeUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserEmail not implemented")
}
func (UnimplementedCrmServer) ChangeUserPhone(context.Context, *ChangeUserPhoneRequest) (*ChangeUserPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPhone not implemented")
}
func (UnimplementedCrmServer) ChangeUserProfile(context.Context, *ChangeUserProfileRequest) (*ChangeUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserProfile not implemented")
}
func (UnimplementedCrmServer) AddReview(context.Context, *AddReviewRequest) (*AddReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReview not implemented")
}
func (UnimplementedCrmServer) DeleteReview(context.Context, *DeleteReviewRequest) (*DeleteReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedCrmServer) GetReviewList(context.Context, *GetReviewListRequest) (*GetReviewListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewList not implemented")
}
func (UnimplementedCrmServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedCrmServer) GetVacancyList(context.Context, *GetVacancyListRequest) (*GetVacancyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacancyList not implemented")
}
func (UnimplementedCrmServer) GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionList not implemented")
}
func (UnimplementedCrmServer) SetSubmission(context.Context, *SetSubmissionRequest) (*SetSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSubmission not implemented")
}
func (UnimplementedCrmServer) SetVacancy(context.Context, *SetVacancyRequest) (*SetVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVacancy not implemented")
}
func (UnimplementedCrmServer) DeleteVacancy(context.Context, *DeleteVacancyRequest) (*DeleteVacancyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVacancy not implemented")
}
func (UnimplementedCrmServer) CreateCompanyTicket(context.Context, *CreateCompanyTicketRequest) (*CreateCompanyTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyTicket not implemented")
}
func (UnimplementedCrmServer) GetCompanyList(context.Context, *GetCompanyListRequest) (*GetCompanyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyList not implemented")
}
func (UnimplementedCrmServer) UpdateCompanyTicketStatus(context.Context, *UpdateCompanyTicketStatusRequest) (*UpdateCompanyTicketStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyTicketStatus not implemented")
}
func (UnimplementedCrmServer) GetCompanyTickets(context.Context, *GetCompanyTicketsRequest) (*GetCompanyTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTickets not implemented")
}
func (UnimplementedCrmServer) SetClientValidation(context.Context, *SetClientValidationRequest) (*SetClientValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetClientValidation not implemented")
}
func (UnimplementedCrmServer) GetClientValidation(context.Context, *GetClientValidationRequest) (*GetClientValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientValidation not implemented")
}
func (UnimplementedCrmServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCrmServer) SaveTransaction(context.Context, *SaveTransactionRequest) (*SaveTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransaction not implemented")
}
func (UnimplementedCrmServer) GetBankAccount(context.Context, *GetBankAccountRequest) (*GetBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccount not implemented")
}
func (UnimplementedCrmServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedCrmServer) UpdateTransactionStatus(context.Context, *UpdateTransactionStatusRequest) (*UpdateTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionStatus not implemented")
}
func (UnimplementedCrmServer) CreateBankAccountTicket(context.Context, *CreateBankAccountTicketRequest) (*CreateBankAccountTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccountTicket not implemented")
}
func (UnimplementedCrmServer) UpdateBankAccountTicketStatus(context.Context, *UpdateBankAccountTicketStatusRequest) (*UpdateBankAccountTicketStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccountTicketStatus not implemented")
}
func (UnimplementedCrmServer) GetBankAccountTickets(context.Context, *GetBankAccountTicketsRequest) (*GetBankAccountTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccountTickets not implemented")
}
func (UnimplementedCrmServer) mustEmbedUnimplementedCrmServer() {}
func (UnimplementedCrmServer) testEmbeddedByValue()             {}

// UnsafeCrmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrmServer will
// result in compilation errors.
type UnsafeCrmServer interface {
	mustEmbedUnimplementedCrmServer()
}

func RegisterCrmServer(s grpc.ServiceRegistrar, srv CrmServer) {
	// If the following call pancis, it indicates UnimplementedCrmServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Crm_ServiceDesc, srv)
}

func _Crm_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SayHello2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SayHello2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SayHello2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SayHello2(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SaveNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SaveNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SaveNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SaveNewUser(ctx, req.(*SaveNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_CheckUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).CheckUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_CheckUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).CheckUserEmail(ctx, req.(*CheckUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_ChangeUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).ChangeUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_ChangeUserPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).ChangeUserPassword(ctx, req.(*ChangeUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_ChangeUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).ChangeUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_ChangeUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).ChangeUserEmail(ctx, req.(*ChangeUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_ChangeUserPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).ChangeUserPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_ChangeUserPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).ChangeUserPhone(ctx, req.(*ChangeUserPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_ChangeUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).ChangeUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_ChangeUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).ChangeUserProfile(ctx, req.(*ChangeUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_AddReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).AddReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_AddReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).AddReview(ctx, req.(*AddReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_DeleteReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).DeleteReview(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetReviewList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetReviewList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetReviewList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetReviewList(ctx, req.(*GetReviewListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetVacancyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVacancyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetVacancyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetVacancyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetVacancyList(ctx, req.(*GetVacancyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetSubmissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetSubmissionList(ctx, req.(*GetSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SetSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SetSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SetSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SetSubmission(ctx, req.(*SetSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SetVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SetVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SetVacancy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SetVacancy(ctx, req.(*SetVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_DeleteVacancy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVacancyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).DeleteVacancy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_DeleteVacancy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).DeleteVacancy(ctx, req.(*DeleteVacancyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_CreateCompanyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).CreateCompanyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_CreateCompanyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).CreateCompanyTicket(ctx, req.(*CreateCompanyTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetCompanyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetCompanyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetCompanyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetCompanyList(ctx, req.(*GetCompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_UpdateCompanyTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyTicketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).UpdateCompanyTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_UpdateCompanyTicketStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).UpdateCompanyTicketStatus(ctx, req.(*UpdateCompanyTicketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetCompanyTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetCompanyTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetCompanyTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetCompanyTickets(ctx, req.(*GetCompanyTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SetClientValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClientValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SetClientValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SetClientValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SetClientValidation(ctx, req.(*SetClientValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetClientValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetClientValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetClientValidation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetClientValidation(ctx, req.(*GetClientValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_SaveTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).SaveTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_SaveTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).SaveTransaction(ctx, req.(*SaveTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetBankAccount(ctx, req.(*GetBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_UpdateTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).UpdateTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_UpdateTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).UpdateTransactionStatus(ctx, req.(*UpdateTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_CreateBankAccountTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).CreateBankAccountTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_CreateBankAccountTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).CreateBankAccountTicket(ctx, req.(*CreateBankAccountTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_UpdateBankAccountTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountTicketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).UpdateBankAccountTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_UpdateBankAccountTicketStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).UpdateBankAccountTicketStatus(ctx, req.(*UpdateBankAccountTicketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crm_GetBankAccountTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrmServer).GetBankAccountTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Crm_GetBankAccountTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrmServer).GetBankAccountTickets(ctx, req.(*GetBankAccountTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Crm_ServiceDesc is the grpc.ServiceDesc for Crm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Crm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "handlers.api.Crm",
	HandlerType: (*CrmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Crm_SayHello_Handler,
		},
		{
			MethodName: "SayHello2",
			Handler:    _Crm_SayHello2_Handler,
		},
		{
			MethodName: "SaveNewUser",
			Handler:    _Crm_SaveNewUser_Handler,
		},
		{
			MethodName: "CheckUserEmail",
			Handler:    _Crm_CheckUserEmail_Handler,
		},
		{
			MethodName: "ChangeUserPassword",
			Handler:    _Crm_ChangeUserPassword_Handler,
		},
		{
			MethodName: "ChangeUserEmail",
			Handler:    _Crm_ChangeUserEmail_Handler,
		},
		{
			MethodName: "ChangeUserPhone",
			Handler:    _Crm_ChangeUserPhone_Handler,
		},
		{
			MethodName: "ChangeUserProfile",
			Handler:    _Crm_ChangeUserProfile_Handler,
		},
		{
			MethodName: "AddReview",
			Handler:    _Crm_AddReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _Crm_DeleteReview_Handler,
		},
		{
			MethodName: "GetReviewList",
			Handler:    _Crm_GetReviewList_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Crm_GetUserInfo_Handler,
		},
		{
			MethodName: "GetVacancyList",
			Handler:    _Crm_GetVacancyList_Handler,
		},
		{
			MethodName: "GetSubmissionList",
			Handler:    _Crm_GetSubmissionList_Handler,
		},
		{
			MethodName: "SetSubmission",
			Handler:    _Crm_SetSubmission_Handler,
		},
		{
			MethodName: "SetVacancy",
			Handler:    _Crm_SetVacancy_Handler,
		},
		{
			MethodName: "DeleteVacancy",
			Handler:    _Crm_DeleteVacancy_Handler,
		},
		{
			MethodName: "CreateCompanyTicket",
			Handler:    _Crm_CreateCompanyTicket_Handler,
		},
		{
			MethodName: "GetCompanyList",
			Handler:    _Crm_GetCompanyList_Handler,
		},
		{
			MethodName: "UpdateCompanyTicketStatus",
			Handler:    _Crm_UpdateCompanyTicketStatus_Handler,
		},
		{
			MethodName: "GetCompanyTickets",
			Handler:    _Crm_GetCompanyTickets_Handler,
		},
		{
			MethodName: "SetClientValidation",
			Handler:    _Crm_SetClientValidation_Handler,
		},
		{
			MethodName: "GetClientValidation",
			Handler:    _Crm_GetClientValidation_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Crm_GetBalance_Handler,
		},
		{
			MethodName: "SaveTransaction",
			Handler:    _Crm_SaveTransaction_Handler,
		},
		{
			MethodName: "GetBankAccount",
			Handler:    _Crm_GetBankAccount_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Crm_GetTransactions_Handler,
		},
		{
			MethodName: "UpdateTransactionStatus",
			Handler:    _Crm_UpdateTransactionStatus_Handler,
		},
		{
			MethodName: "CreateBankAccountTicket",
			Handler:    _Crm_CreateBankAccountTicket_Handler,
		},
		{
			MethodName: "UpdateBankAccountTicketStatus",
			Handler:    _Crm_UpdateBankAccountTicketStatus_Handler,
		},
		{
			MethodName: "GetBankAccountTickets",
			Handler:    _Crm_GetBankAccountTickets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crm.proto",
}
