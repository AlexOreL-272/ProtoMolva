// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: agent.proto

package service_agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_GetVacancyList_FullMethodName    = "/service_agent.Agent/GetVacancyList"
	Agent_GetSubmissionList_FullMethodName = "/service_agent.Agent/GetSubmissionList"
	Agent_DeleteSubmission_FullMethodName  = "/service_agent.Agent/DeleteSubmission"
	Agent_GetProfileData_FullMethodName    = "/service_agent.Agent/GetProfileData"
	Agent_SetProfileData_FullMethodName    = "/service_agent.Agent/SetProfileData"
	Agent_GetCompanyData_FullMethodName    = "/service_agent.Agent/GetCompanyData"
	Agent_GetCompaniesUid_FullMethodName   = "/service_agent.Agent/GetCompaniesUid"
	Agent_SetCompanyData_FullMethodName    = "/service_agent.Agent/SetCompanyData"
	Agent_GetBalance_FullMethodName        = "/service_agent.Agent/GetBalance"
	Agent_GetTransactions_FullMethodName   = "/service_agent.Agent/GetTransactions"
	Agent_CreateTransaction_FullMethodName = "/service_agent.Agent/CreateTransaction"
	Agent_GetBankAccounts_FullMethodName   = "/service_agent.Agent/GetBankAccounts"
	Agent_CreateBankAccount_FullMethodName = "/service_agent.Agent/CreateBankAccount"
	Agent_EditBankAccount_FullMethodName   = "/service_agent.Agent/EditBankAccount"
	Agent_DeleteBankAccount_FullMethodName = "/service_agent.Agent/DeleteBankAccount"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	// <-------------- VACANCY -------------->
	/// Получить список вакансий. Получает GetVacancyListRequest, возвращает
	/// GetVacancyListResponse
	GetVacancyList(ctx context.Context, in *GetVacancyListRequest, opts ...grpc.CallOption) (*GetVacancyListResponse, error)
	// <-------------- SUBMISSION -------------->
	/// Получить список заявок. Получает GetSubmissionListRequest, возвращает
	/// GetSubmissionListResponse
	GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error)
	/// Метод для удаления заявки. Получает DeleteSubmissionRequest, возвращает
	/// DeleteSubmissionResponse
	DeleteSubmission(ctx context.Context, in *DeleteSubmissionRequest, opts ...grpc.CallOption) (*DeleteSubmissionResponse, error)
	// <-------------- PROFILE -------------->
	/// Получить данные агента. Получает GetProfileRequest, возвращает
	/// GetProfileResponse
	GetProfileData(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	/// Метод для изменения данных агента. Получает SetProfileRequest, возвращает
	/// SetProfileResponse
	SetProfileData(ctx context.Context, in *SetProfileRequest, opts ...grpc.CallOption) (*SetProfileResponse, error)
	// <-------------- COMPANY -------------->
	/// Получить данные компании. Получает GetCompanyDataRequest, возвращает
	/// GetCompanyDataResponse
	GetCompanyData(ctx context.Context, in *GetCompanyDataRequest, opts ...grpc.CallOption) (*GetCompanyDataResponse, error)
	// Получить список компаний по Uid. Получает GetCompanyDataRequest возвращает
	// GetCompaniesUidResponse
	GetCompaniesUid(ctx context.Context, in *GetCompanyDataRequest, opts ...grpc.CallOption) (*GetCompaniesUidResponse, error)
	/// Метод для изменения данных компании. Получает SetCompanyDataRequest, возвращает
	/// SetCompanyDataResponse
	SetCompanyData(ctx context.Context, in *SetCompanyDataRequest, opts ...grpc.CallOption) (*SetCompanyDataResponse, error)
	// <-------------- BALANCE -------------->
	/// Получить баланс агента. Получает GetBalanceRequest, возвращает GetBalanceResponse
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// <-------------- TRANSACTIONS -------------->
	/// Получить список транзакций агента. Получает GetTransactionsRequest, возвращает
	/// GetTransactionsResponse
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error)
	/// Создать транзакцию. Получает CreateTransactionRequest, возвращает
	/// CreateTransactionResponse
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error)
	// <-------------- CURRENCY ACCOUNT -------------->
	/// Получить список расчетных счетов агента. Получает GetBankAccountsRequest, возвращает
	/// GetBankAccountsResponse
	GetBankAccounts(ctx context.Context, in *GetBankAccountsRequest, opts ...grpc.CallOption) (*GetBankAccountsResponse, error)
	/// Создать расчетный счет. Получает CreateBankAccountRequest, возвращает
	/// CreateBankAccountResponse
	CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error)
	/// Редактировать расчетный счет. Получает EditBankAccountRequest, возвращает
	/// EditBankAccountResponse
	EditBankAccount(ctx context.Context, in *EditBankAccountRequest, opts ...grpc.CallOption) (*EditBankAccountResponse, error)
	/// Удалить расчетный счет. Получает DeleteBankAccountRequest, возвращает
	/// DeleteBankAccountResponse
	DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) GetVacancyList(ctx context.Context, in *GetVacancyListRequest, opts ...grpc.CallOption) (*GetVacancyListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVacancyListResponse)
	err := c.cc.Invoke(ctx, Agent_GetVacancyList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetSubmissionList(ctx context.Context, in *GetSubmissionListRequest, opts ...grpc.CallOption) (*GetSubmissionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubmissionListResponse)
	err := c.cc.Invoke(ctx, Agent_GetSubmissionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteSubmission(ctx context.Context, in *DeleteSubmissionRequest, opts ...grpc.CallOption) (*DeleteSubmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSubmissionResponse)
	err := c.cc.Invoke(ctx, Agent_DeleteSubmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetProfileData(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, Agent_GetProfileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetProfileData(ctx context.Context, in *SetProfileRequest, opts ...grpc.CallOption) (*SetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProfileResponse)
	err := c.cc.Invoke(ctx, Agent_SetProfileData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetCompanyData(ctx context.Context, in *GetCompanyDataRequest, opts ...grpc.CallOption) (*GetCompanyDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyDataResponse)
	err := c.cc.Invoke(ctx, Agent_GetCompanyData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetCompaniesUid(ctx context.Context, in *GetCompanyDataRequest, opts ...grpc.CallOption) (*GetCompaniesUidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompaniesUidResponse)
	err := c.cc.Invoke(ctx, Agent_GetCompaniesUid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetCompanyData(ctx context.Context, in *SetCompanyDataRequest, opts ...grpc.CallOption) (*SetCompanyDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCompanyDataResponse)
	err := c.cc.Invoke(ctx, Agent_SetCompanyData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, Agent_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionsResponse)
	err := c.cc.Invoke(ctx, Agent_GetTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTransactionResponse)
	err := c.cc.Invoke(ctx, Agent_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetBankAccounts(ctx context.Context, in *GetBankAccountsRequest, opts ...grpc.CallOption) (*GetBankAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankAccountsResponse)
	err := c.cc.Invoke(ctx, Agent_GetBankAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankAccountResponse)
	err := c.cc.Invoke(ctx, Agent_CreateBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) EditBankAccount(ctx context.Context, in *EditBankAccountRequest, opts ...grpc.CallOption) (*EditBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditBankAccountResponse)
	err := c.cc.Invoke(ctx, Agent_EditBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBankAccountResponse)
	err := c.cc.Invoke(ctx, Agent_DeleteBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility.
type AgentServer interface {
	// <-------------- VACANCY -------------->
	/// Получить список вакансий. Получает GetVacancyListRequest, возвращает
	/// GetVacancyListResponse
	GetVacancyList(context.Context, *GetVacancyListRequest) (*GetVacancyListResponse, error)
	// <-------------- SUBMISSION -------------->
	/// Получить список заявок. Получает GetSubmissionListRequest, возвращает
	/// GetSubmissionListResponse
	GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error)
	/// Метод для удаления заявки. Получает DeleteSubmissionRequest, возвращает
	/// DeleteSubmissionResponse
	DeleteSubmission(context.Context, *DeleteSubmissionRequest) (*DeleteSubmissionResponse, error)
	// <-------------- PROFILE -------------->
	/// Получить данные агента. Получает GetProfileRequest, возвращает
	/// GetProfileResponse
	GetProfileData(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	/// Метод для изменения данных агента. Получает SetProfileRequest, возвращает
	/// SetProfileResponse
	SetProfileData(context.Context, *SetProfileRequest) (*SetProfileResponse, error)
	// <-------------- COMPANY -------------->
	/// Получить данные компании. Получает GetCompanyDataRequest, возвращает
	/// GetCompanyDataResponse
	GetCompanyData(context.Context, *GetCompanyDataRequest) (*GetCompanyDataResponse, error)
	// Получить список компаний по Uid. Получает GetCompanyDataRequest возвращает
	// GetCompaniesUidResponse
	GetCompaniesUid(context.Context, *GetCompanyDataRequest) (*GetCompaniesUidResponse, error)
	/// Метод для изменения данных компании. Получает SetCompanyDataRequest, возвращает
	/// SetCompanyDataResponse
	SetCompanyData(context.Context, *SetCompanyDataRequest) (*SetCompanyDataResponse, error)
	// <-------------- BALANCE -------------->
	/// Получить баланс агента. Получает GetBalanceRequest, возвращает GetBalanceResponse
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// <-------------- TRANSACTIONS -------------->
	/// Получить список транзакций агента. Получает GetTransactionsRequest, возвращает
	/// GetTransactionsResponse
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error)
	/// Создать транзакцию. Получает CreateTransactionRequest, возвращает
	/// CreateTransactionResponse
	CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error)
	// <-------------- CURRENCY ACCOUNT -------------->
	/// Получить список расчетных счетов агента. Получает GetBankAccountsRequest, возвращает
	/// GetBankAccountsResponse
	GetBankAccounts(context.Context, *GetBankAccountsRequest) (*GetBankAccountsResponse, error)
	/// Создать расчетный счет. Получает CreateBankAccountRequest, возвращает
	/// CreateBankAccountResponse
	CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error)
	/// Редактировать расчетный счет. Получает EditBankAccountRequest, возвращает
	/// EditBankAccountResponse
	EditBankAccount(context.Context, *EditBankAccountRequest) (*EditBankAccountResponse, error)
	/// Удалить расчетный счет. Получает DeleteBankAccountRequest, возвращает
	/// DeleteBankAccountResponse
	DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgentServer struct{}

func (UnimplementedAgentServer) GetVacancyList(context.Context, *GetVacancyListRequest) (*GetVacancyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacancyList not implemented")
}
func (UnimplementedAgentServer) GetSubmissionList(context.Context, *GetSubmissionListRequest) (*GetSubmissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmissionList not implemented")
}
func (UnimplementedAgentServer) DeleteSubmission(context.Context, *DeleteSubmissionRequest) (*DeleteSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubmission not implemented")
}
func (UnimplementedAgentServer) GetProfileData(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfileData not implemented")
}
func (UnimplementedAgentServer) SetProfileData(context.Context, *SetProfileRequest) (*SetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfileData not implemented")
}
func (UnimplementedAgentServer) GetCompanyData(context.Context, *GetCompanyDataRequest) (*GetCompanyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyData not implemented")
}
func (UnimplementedAgentServer) GetCompaniesUid(context.Context, *GetCompanyDataRequest) (*GetCompaniesUidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesUid not implemented")
}
func (UnimplementedAgentServer) SetCompanyData(context.Context, *SetCompanyDataRequest) (*SetCompanyDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCompanyData not implemented")
}
func (UnimplementedAgentServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedAgentServer) GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedAgentServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedAgentServer) GetBankAccounts(context.Context, *GetBankAccountsRequest) (*GetBankAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccounts not implemented")
}
func (UnimplementedAgentServer) CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedAgentServer) EditBankAccount(context.Context, *EditBankAccountRequest) (*EditBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditBankAccount not implemented")
}
func (UnimplementedAgentServer) DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}
func (UnimplementedAgentServer) testEmbeddedByValue()               {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	// If the following call pancis, it indicates UnimplementedAgentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_GetVacancyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVacancyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetVacancyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetVacancyList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetVacancyList(ctx, req.(*GetVacancyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetSubmissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetSubmissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetSubmissionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetSubmissionList(ctx, req.(*GetSubmissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteSubmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteSubmission(ctx, req.(*DeleteSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetProfileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetProfileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetProfileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetProfileData(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetProfileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetProfileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetProfileData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetProfileData(ctx, req.(*SetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetCompanyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetCompanyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetCompanyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetCompanyData(ctx, req.(*GetCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetCompaniesUid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetCompaniesUid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetCompaniesUid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetCompaniesUid(ctx, req.(*GetCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetCompanyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCompanyDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetCompanyData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_SetCompanyData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetCompanyData(ctx, req.(*SetCompanyDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetBankAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetBankAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_GetBankAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetBankAccounts(ctx, req.(*GetBankAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_CreateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateBankAccount(ctx, req.(*CreateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_EditBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).EditBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_EditBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).EditBankAccount(ctx, req.(*EditBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_DeleteBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).DeleteBankAccount(ctx, req.(*DeleteBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVacancyList",
			Handler:    _Agent_GetVacancyList_Handler,
		},
		{
			MethodName: "GetSubmissionList",
			Handler:    _Agent_GetSubmissionList_Handler,
		},
		{
			MethodName: "DeleteSubmission",
			Handler:    _Agent_DeleteSubmission_Handler,
		},
		{
			MethodName: "GetProfileData",
			Handler:    _Agent_GetProfileData_Handler,
		},
		{
			MethodName: "SetProfileData",
			Handler:    _Agent_SetProfileData_Handler,
		},
		{
			MethodName: "GetCompanyData",
			Handler:    _Agent_GetCompanyData_Handler,
		},
		{
			MethodName: "GetCompaniesUid",
			Handler:    _Agent_GetCompaniesUid_Handler,
		},
		{
			MethodName: "SetCompanyData",
			Handler:    _Agent_SetCompanyData_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Agent_GetBalance_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Agent_GetTransactions_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Agent_CreateTransaction_Handler,
		},
		{
			MethodName: "GetBankAccounts",
			Handler:    _Agent_GetBankAccounts_Handler,
		},
		{
			MethodName: "CreateBankAccount",
			Handler:    _Agent_CreateBankAccount_Handler,
		},
		{
			MethodName: "EditBankAccount",
			Handler:    _Agent_EditBankAccount_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _Agent_DeleteBankAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
