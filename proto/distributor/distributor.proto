syntax = "proto3";

package service_distributor;
option go_package = "service.distributor";

import "google/api/annotations.proto";
import "src/google/protobuf/timestamp.proto";

service Distributor {
  // <-------------- VACANCY -------------->
  rpc GetVacancyList(GetVacancyListRequest) returns (GetVacancyListResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/vacancies"
    };
  }

  rpc CreateVacancy(CreateVacancyRequest) returns (CreateVacancyResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/vacancies"
      body : "*"
    };
  }

  rpc EditVacancy(EditVacancyRequest) returns (EditVacancyResponse) {
    option (google.api.http) = {
      put : "/v1/distributor/{distributor_id}/vacancies/{vacancy_id}"
      body : "*"
    };
  }

  rpc DeleteVacancy(DeleteVacancyRequest) returns (DeleteVacancyResponse) {
    option (google.api.http) = {
      delete : "/v1/distributor/{distributor_id}/vacancies/{vacancy_id}"
    };
  }

  rpc SendVacancyToModeration(SendVacancyToModerationRequest) returns (SendVacancyToModerationResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/vacancies/{vacancy_id}/visibility"
      body : "*"
    };
  }

  // <-------------- SUBMISSION -------------->
  rpc GetSubmissionsForVacancy(GetSubmissionsForVacancyRequest) returns (GetSubmissionsForVacancyResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/vacancy/{vacancy_id}/submissions"
    };
  }

  rpc SetSubmissionStatus(SetSubmissionStatusRequest) returns (SetSubmissionStatusResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/vacancies/{vacancy_id}/submissions/{submission_id}/status"
      body : "*"
    };
  }

  // <-------------- PROFILE -------------->
  rpc GetProfileData(GetProfileRequest) returns (GetProfileResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/profile"
    };
  }

  rpc SetProfileData(SetProfileRequest) returns (SetProfileResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/profile"
      body : "*"
    };
  }

  // <-------------- COMPANY -------------->
  rpc GetCompanyData(GetCompanyDataRequest) returns (GetCompanyDataResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/company" 
    };
  }

  // Получить список компаний по Uid. Получает GetCompanyDataRequest возвращает
  // GetCompaniesUidResponse
  rpc GetCompaniesUid(GetCompanyDataRequest) returns (GetCompaniesUidResponse) {
    option (google.api.http) = {
      get : "/v1/agents/{agent_id}/companies"
    };
  }

  rpc SetCompanyData(SetCompanyDataRequest) returns (SetCompanyDataResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/company"
      body : "*"
    };
  }

  // <-------------- BALANCE -------------->
  /// Получить баланс дистрибьютора. Получает GetBalanceRequest, возвращает GetBalanceResponse
  rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/balance"
    };
  }

  // <-------------- TRANSACTIONS -------------->
  /// Получить список транзакций дистрибьютора. Получает GetTransactionsRequest, возвращает
  /// GetTransactionsResponse
  rpc GetTransactions(GetTransactionsRequest) returns (GetTransactionsResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/transactions"
    };
  }

  /// Создать транзакцию на пополнение баланса. Получает CreateTransactionRequest, возвращает
  /// CreateTransactionResponse
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/transactions"
      body : "*"
    };
  }

  // <-------------- CURRENCY ACCOUNT -------------->
  /// Получить список расчетных счетов дистрибьютора. Получает GetBankAccountsRequest, возвращает
  /// GetBankAccountsResponse
  rpc GetBankAccounts(GetBankAccountsRequest) returns (GetBankAccountsResponse) {
    option (google.api.http) = {
      get : "/v1/distributor/{distributor_id}/currency_accounts"
    };
  }

  /// Создать расчетный счет. Получает CreateBankAccountRequest, возвращает
  /// CreateBankAccountResponse
  rpc CreateBankAccount(CreateBankAccountRequest) returns (CreateBankAccountResponse) {
    option (google.api.http) = {
      post : "/v1/distributor/{distributor_id}/currency_accounts"
      body : "*"
    };
  }

  /// Редактировать расчетный счет. Получает EditBankAccountRequest, возвращает
  /// EditBankAccountResponse
  rpc EditBankAccount(EditBankAccountRequest) returns (EditBankAccountResponse) {
    option (google.api.http) = {
      put : "/v1/distributor/{distributor_id}/currency_accounts/{bank_account_id}"
      body : "*"
    };
  }

  /// Удалить расчетный счет. Получает DeleteBankAccountRequest, возвращает
  /// DeleteBankAccountResponse
  rpc DeleteBankAccount(DeleteBankAccountRequest) returns (DeleteBankAccountResponse) {
    option (google.api.http) = {
      delete : "/v1/distributor/{distributor_id}/currency_accounts/{bank_account_id}"
    };
  }
}

// <-------------- REQUESTS -------------->
// <=============== VACANCY ===============>

message GetVacancyListRequest {
  string distributor_id = 1;
  VacancyFilters filters = 2;
}

message CreateVacancyRequest {
  string distributor_id = 1;
  Vacancy vacancy = 2;
}

message EditVacancyRequest {
  string distributor_id = 1;
  Vacancy vacancy = 2;
}

message DeleteVacancyRequest {
  string distributor_id = 1;
  string vacancy_id = 2;
}

message SendVacancyToModerationRequest {
  string distributor_id = 1;
  string vacancy_id = 2;
}

// <=============== SUBMISSION ===============>

message GetSubmissionsForVacancyRequest {
  string distributor_id = 1;
  string vacancy_id = 2;
  SubmissionFilters filters = 3;
}

message SetSubmissionStatusRequest {
  string distributor_id = 1;
  string submission_id = 2;
  SubmissionsStatus status = 3;
}

// <=============== PROFILE ===============>

message GetProfileRequest {
  string distributor_id = 1;
}

message SetProfileRequest {
  string distributor_id = 1;
  FullPersonalData profile = 2;
}

// <=============== COMPANY ===============>

message GetCompanyDataRequest {
  string distributor_id = 1;
  string company_id = 2;
}

message SetCompanyDataRequest {
  string distributor_id = 1;
  Company company = 2;
  optional string new_staff_member = 3;
}

// <=============== BALANCE ===============>

message GetBalanceRequest {
  string distributor_id = 1;
}

// <=============== TRANSACTIONS ===============>

message GetTransactionsRequest {
  optional string distributor_id = 1;
  TransactionFilters filters = 2;
}

message CreateTransactionRequest {
  string receiver_bank_account_id = 1;
  int64 amount = 2;
  string currency = 3;
  string sender_bank_account_id = 4;
  string request_id = 5;
}

// <=============== CURRENCY ACCOUNT ===============>

message GetBankAccountsRequest {
  string distributor_id = 1;
}

message CreateBankAccountRequest {
  string distributor_id = 1;
  BankAccountEditables currency_account = 2;
}

message EditBankAccountRequest {
  string distributor_id = 1;
  string bank_account_id = 2;
  BankAccountEditables currency_account = 3;
}

message DeleteBankAccountRequest {
  string distributor_id = 1;
  string bank_account_id = 2;
}

// <-------------- RESPONSES -------------->
// <=============== VACANCY ===============>

message GetVacancyListResponse {
  repeated Vacancy vacancies = 1;
}

message CreateVacancyResponse {
  Vacancy vacancy = 1;
}

message EditVacancyResponse {
  Vacancy vacancy = 1;
}

message DeleteVacancyResponse {

}

message SendVacancyToModerationResponse {

}

// <=============== SUBMISSION ===============>

message GetSubmissionsForVacancyResponse {
  repeated Submission submissions = 1;
}

message SetSubmissionStatusResponse {
  Submission submission = 1;
}

// <=============== PROFILE ===============>

message GetProfileResponse {
  FullPersonalData profile = 1;
}

message SetProfileResponse {
  FullPersonalData profile = 1;
}

// <=============== COMPANY ===============>

message GetCompanyDataResponse {
  Company company = 1;
}

message GetCompaniesUidResponse {
  repeated CompanyBrief companies = 1;
}

message SetCompanyDataResponse {
  Company company = 1;
}

// <=============== BALANCE ===============>

message GetBalanceResponse {
  int64 raw_balance = 1;
  int64 clean_balance = 2;
}

// <=============== TRANSACTIONS ===============>

message GetTransactionsResponse {
  repeated Transaction transactions = 1;
}

message CreateTransactionResponse {
}

// <=============== CURRENCY ACCOUNT ===============>

message GetBankAccountsResponse {
  repeated BankAccount currency_accounts = 1;
}

message CreateBankAccountResponse {
}

message EditBankAccountResponse {
}

message DeleteBankAccountResponse {
}

// <-------------- SOURCES -------------->
// <=============== ENUMS ===============>

enum SubmissionsStatus {
  SUBM_CREATED = 0;      // Создано
  SUBM_IN_PROGRESS = 1;  // В процессе
  SUBM_ON_INTERVIEW = 2; // На собеседовании
  SUBM_DECLINED = 3;     // Отклонено
  SUBM_SUSPENDED = 4;    // Приостановлено (как будто удалено)
  SUBM_ACCEPTED = 5;     // Принято
}

enum VacancyStatus {
  VAC_UNSPECIFIED = 0;    // Не указано
  VAC_CREATED = 1;        // Создано
  VAC_IN_MODERATION = 2;  // В модерации
  VAC_ACCEPTED = 3;       // Принято
  VAC_DECLINED = 4;       // Отклонено
}

enum TransactionStatus {
  TRANS_UNSPECIFIED = 0;  // Не указано
  TRANS_NEW = 1;          // Новая
  TRANS_ACCEPTED = 2;     // Принятая
  TRANS_DECLINED = 3;     // Отклонена
  TRANS_ON_REVIEW = 4;    // На проверке
}

enum TransactionType {
  TRANS_TYPE_UNSPECIFIED = 0;    // Не указано
  TRANS_TYPE_REPLENISHMENT = 1;  // Пополнение
  TRANS_TYPE_WITHDRAWAL = 2;     // Вывод
}

// <=============== UTILS ===============>

message VacancyModeration {
  VacancyStatus status = 1;
  string description = 2;
}

message Image {
  string storage_link = 1;
}

// <=============== VACANCY ===============>

message VacancyFilters {
  optional string distributor_id = 1;
  optional string vacancy_id = 2;
  optional string company_id = 3;
  optional string region = 4;
  optional int32 salary_bottom = 5;
  optional int32 salary_top = 6;
  optional string mark = 7;
  optional bool is_archived = 8;
  optional VacancyStatus status = 9;
  optional int32 amount = 10;
  optional int32 offset = 11;
}

message Vacancy {
  optional string vacancy_id = 1;
  optional string company_id = 2;
  optional string name = 3;
  optional string address = 4;
  optional string work_format = 5;
  optional int32 agent_reward = 6;
  optional int32 salary_bottom = 7;
  optional int32 salary_top = 8;
  optional string requirements = 9;
  optional string responsibilities = 10;
  optional string additional_info = 11;
  optional string region = 12;
  optional string mark = 13;
  optional bool is_archived = 14;
  optional VacancyModeration moderation = 15;
  optional string target_action = 16;
  optional int32 target_action_duration = 17;
  google.protobuf.Timestamp create_date = 18;
}

message VacancyInfo {
  string id = 1;
  string name = 2;
}

// <=============== SUBMISSION ===============>

message SubmissionFilters {
  optional string vacancy_id = 1;
  optional SubmissionsStatus status = 2;
  optional int32 amount = 3;
  optional int32 offset = 4;
}

message Submission {
  string agent_id = 1;
  string submission_id = 2;
  string vacancy_id = 3;
  SubmissionsStatus status = 4;
  ClientData client_data = 5;
}

// <=============== PERSONAL DATA ===============>

message FullPersonalData {
  string uuid = 1;
  optional string name = 2;
  optional string description = 3;
  optional Image user_image = 4;
  optional string phone_number = 5;
  optional string email = 6;
  repeated string experience = 7;
  repeated string education = 8;
  optional string app_theme = 9;
  optional string region = 10;
}

message ClientData {
  string uuid = 1;
  string name = 2;
  string surname = 3;
  optional string patronymic = 4;
  string phone_number = 5;
  string email = 6;
  optional string resume = 7;
}

// <=============== COMPANY ===============>

message Company {
  optional string company_id = 1;
  optional string creator_id = 2;
  optional string name = 3;
  optional string legal_person = 4;
  optional string inn = 5;                   // ИНН
  optional string giro_account = 6;          // Расчетный счет
  optional string correspondent_account = 7; // Счет сотрудника
  optional string bik = 8;                   // БИК
  optional string kpp = 9;                   // КПП
  optional string description = 10;
  optional string website = 11;
  optional string physical_address = 12;
  optional string legal_address = 13;
}

message CompanyBrief {
  string company_id = 1;
  string name = 2;
}

// <=============== TRANSACTION ===============>

message TransactionFilters {
  optional string type = 1;     // Тип транзакции (replenishment / withdrawal)
  optional int32 page_id = 2;   // Alias на offset
  optional int32 page_size = 3; // Alias на limit
}

message Transaction {
  string id = 1;
  TransactionType type = 2;
  TransactionStatus status = 3;
  int64 amount = 4;
  string currency = 5;
  VacancyInfo vacancy = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// <=============== CURRENCY ACCOUNT ===============>

message BankAccount {
  string id = 1;
  string account_number = 2;
  string bank_name = 3;
  string bik = 4;
  string correspondent_account = 5;
  string inn = 6;
  string kpp = 7;
  string ogrn = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message BankAccountEditables {
  string account_number = 1;
  string bank_name = 2;
  string bik = 3;
  string correspondent_account = 4;
  string inn = 5;
  string kpp = 6;
  string ogrn = 7;
}
